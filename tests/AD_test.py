import pytestimport numpy as npimport math import autodiffdef test_init_var():    # Create a one-dimensional variable    x = var('x')    # Assign a value to x    x.value = 3    assert x.value == 3, "Error: incorrect initialization of variable"    f = x    assert f.eval(x = 3)['value'] == 3, "Error: incorrect initialization of function"    def test_mul():    x = var('x')    f = x * 3    assert f.eval(x=3) == {'value': 9, 'derivative': 3}, "Error: incorrect multiplication"    g = x * const(3)    assert g.eval(x=3) == {'value': 9, 'derivative': 3}, "Error: incorrect multiplication"def test_rmul():    x = var('x')    f = 3 * x    assert f.eval(x=3) == {'value': 9, 'derivative': 3}, "Error: incorrect right multiplication"    g = const(3) * x    assert g.eval(x=3) == {'value': 9, 'derivative': 3}, "Error: incorrect right multiplication"def test_add():    x = var('x')    f = x + 3    assert f.eval(x=3) == {'value': 6, 'derivative': 1}, "Error: incorrect addition"    g = x + const(3)    assert g.eval(x=3) == {'value': 6, 'derivative': 1}, "Error: incorrect addition"def test_radd():    x = var('x')    f = 3 + x    assert f.eval(x=3) == {'value': 6, 'derivative': 1}, "Error: incorrect right addition"    g = const(3) + x    assert g.eval(x=3) == {'value': 6, 'derivative': 1}, "Error: incorrect right addition"    def test_pow():    x = var('x')    f = x ** 2    assert f.eval(x=3) == {'value': 9, 'derivative': 6}, "Error: incorrect power"    g = x ** const(2)    assert g.eval(x=3) == {'value': 9, 'derivative': 6}, "Error: incorrect power"def test_rpow():    x = var('x')    f = math.e ** x    assert f.eval(x=2) == {'value': math.e ** 2, 'derivative': math.e ** 2}, "Error: incorrect right power"    g = const(math.e) ** x    assert g.eval(x=2) == {'value': math.e ** 2, 'derivative': math.e ** 2}, "Error: incorrect right power"def test_neg():    x = var('x')    f = -x    assert.eval(x=3) == {'value': 3, 'derivative': -1}, "Error: incorrect negative operation"